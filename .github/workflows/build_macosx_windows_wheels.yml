name: Build Mac OS X & Windows wheels and upload to PyPI upon release

# Update on every push and PR to main, and upon release creation
on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '!tests/**'
      - '!doc/**'
      - '!.github/**'
      - '.github/conda-build-environment-macos-latest.yml'
      - '.github/conda-build-environment-windows-latest.yml'
      - '.github/workflows/build_macosx_windows_wheels.yml'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'doc/**'
  release:
    types: [created]

jobs:
  build:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest,windows-latest]
        python-version: [3.7,3.8,3.9,"3.10"]
    steps:
      # check-out this repository
      - uses: actions/checkout@v3
      # Install micro-mamba, as specified by this repository's environment.yml
      - uses: mamba-org/provision-with-micromamba@v13
        with:
          environment-name: galpywheels
          environment-file: .github/conda-build-environment-${{ matrix.os }}.yml
          extra-specs: python=${{ matrix.python-version }}
          cache-downloads: true
      - name: Install pip dependencies
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Set environment variables on Mac OS
        if: matrix.os == 'macos-latest'
        shell: bash -l {0}
        run: |
          echo "CFLAGS=-I$CONDA_PREFIX/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L$CONDA_PREFIX/lib" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=-L$CONDA_PREFIX/lib" >> $GITHUB_ENV
      - name: Set environment variables on Windows
        if: matrix.os == 'windows-latest'
        shell: bash -l {0}
        run: |
          echo "INCLUDE=$CONDA_PREFIX\\Library\\include" >> $GITHUB_ENV
          echo "LIB=$CONDA_PREFIX\\Library\\lib" >> $GITHUB_ENV
          echo "LIBPATH=$CONDA_PREFIX\\Library\\lib" >> $GITHUB_ENV
      - name: Build wheel
        shell: bash -l {0}
        run: |
          mkdir wheelhouse
          python -m build --wheel --outdir wheelhouse
      - name: Repair wheel (add external libs)
        if: matrix.os == 'macos-latest'
        shell: bash -l {0}
        run: |
          python -m pip install delocate
          delocate-wheel -v wheelhouse/*
      # Upload wheel as artifact
      - uses: actions/upload-artifact@v3
        with:
          name: galpy-wheel-python-${{ matrix.python-version }}-${{ matrix.os }}
          path: wheelhouse/*.whl
# We need to run on Ubuntu for pypa/gh-action-pypi-publish action
# so might as well also combine
  combine:
    name: Combine wheels into single artifact and upload to PyPI upon release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          mkdir tmp_wheelhouse
          mkdir wheelhouse
      - uses: actions/download-artifact@v3
        with:
          path: tmp_wheelhouse/
      - run: find tmp_wheelhouse/ -mindepth 2 -type f -exec mv -i '{}' wheelhouse/ ';'
      - uses: actions/upload-artifact@v3
        with:
          name: galpy-wheels-macos-windows-latest
          path: wheelhouse/*.whl
      # Upload to PyPI if this is a release
      - name: Publish distribution to PyPI
        if: github.event_name == 'release' && github.event.action == 'created'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.pypi_token }}
          packages_dir: wheelhouse/
      - name: Rename wheel to 'latest' version for AWS S3
        if: github.event_name != 'release' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        run: |
          GALPY_VERSION="$(awk '/^current_version/{print $NF}' .bumpversion.cfg)"
          for f in wheelhouse/*$GALPY_VERSION*; do mv -i -- "$f" "${f//$GALPY_VERSION/latest}"; done
      # Upload to AWS S3
      - name: Upload to AWS S3
        if: github.event_name != 'release' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --follow-symlinks --delete --exclude "*manylinux*" --exclude "*none-any*" --exclude "*emscripten*"
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-2'
          SOURCE_DIR: wheelhouse
          DEST_DIR: wheelhouse
